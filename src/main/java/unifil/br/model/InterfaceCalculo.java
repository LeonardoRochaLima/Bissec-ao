package unifil.br.model;

import javax.swing.*;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import java.awt.*;
import java.text.DecimalFormat;

public class InterfaceCalculo {

    private JPanel InterfaceCalculoNumerico;
    private JTextField x5;
    private JTextField x4;
    private JTextField x3;
    private JTextField x2;
    private JTextField x;
    private JTextField ind;
    private JPanel funcao;
    private JTextField intervaloMin;
    private JTextField intervaloMax;
    private JTextField valoreuler;
    private JButton Calcular;

    public float getX5() {
        float temp = 0;
        DecimalFormat df = new DecimalFormat("0.00000");
        try {
            temp = Float.parseFloat(x5.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }

    public float getX4() {
        float temp = 0;
        try {
            temp = Float.parseFloat(x4.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);

    }

    public float getX3() {
        float temp = 0;
        DecimalFormat df = new DecimalFormat("0.00000");
        try {
            temp = Float.parseFloat(x3.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }

    public float getX2() {
        float temp = 0;
        try {
            temp = Float.parseFloat(x2.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }

    public float getX() {
        float temp = 0;
        try {
            temp = Float.parseFloat(x.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }

    public float getInd() {
        float temp = 0;
        try {
            temp = Float.parseFloat(ind.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }

    public float getIntervaloMin() {
        float temp = 0;
        try {
            temp = Float.parseFloat(intervaloMin.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }

    public float getIntervaloMax() {
        float temp = 0;
        try {
            temp = Float.parseFloat(intervaloMax.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }

    public float getValoreuler() {
        float temp = 0;
        try {
            temp = Float.parseFloat(valoreuler.getText());
        } catch (NumberFormatException e) {

        }
        return df.format(temp);
    }


    {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        InterfaceCalculoNumerico = new JPanel();
        InterfaceCalculoNumerico.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Dialog", Font.BOLD, 24, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Interface Calculo Numerico");
        InterfaceCalculoNumerico.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        InterfaceCalculoNumerico.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(30, -1), null, null, 0, false));
        funcao = new JPanel();
        funcao.setLayout(new GridLayoutManager(1, 12, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(funcao, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("F(x) = ");
        funcao.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(41, 30), null, 0, false));
        x5 = new JTextField();
        x5.setText("");
        funcao.add(x5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(66, 30), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("x⁵ + ");
        funcao.add(label3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(27, 30), null, 0, false));
        x4 = new JTextField();
        funcao.add(x4, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 30), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("x⁴  + ");
        funcao.add(label4, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 30), null, 0, false));
        x3 = new JTextField();
        funcao.add(x3, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 30), null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("x³ +");
        funcao.add(label5, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(24, 30), null, 0, false));
        x2 = new JTextField();
        funcao.add(x2, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 30), null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("x² + ");
        funcao.add(label6, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(27, 30), null, 0, false));
        x = new JTextField();
        funcao.add(x, new GridConstraints(0, 9, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 30), null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("x +");
        funcao.add(label7, new GridConstraints(0, 10, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(19, 30), null, 0, false));
        ind = new JTextField();
        funcao.add(ind, new GridConstraints(0, 11, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 30), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 7, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(-1, 50), null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Intervalo");
        panel2.add(label8, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(62, 50), null, 0, false));
        intervaloMin = new JTextField();
        intervaloMin.setText("");
        panel2.add(intervaloMin, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(50, 30), new Dimension(60, 30), null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("A");
        panel2.add(label9, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, 50), null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("E = 10⁻");
        panel2.add(label10, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(47, 50), null, 0, false));
        valoreuler = new JTextField();
        panel2.add(valoreuler, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, 30), new Dimension(60, 30), null, 0, false));
        Calcular = new JButton();
        Calcular.setText("Calcular");
        panel2.add(Calcular, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(89, 50), null, 0, false));
        intervaloMax = new JTextField();
        intervaloMax.setText("");
        panel2.add(intervaloMax, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(50, 30), new Dimension(60, 30), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return InterfaceCalculoNumerico;
    }


}

